{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","setEditText","saveWorking","state","a","async","AsyncStorage","setItem","JSON","stringify","saveToDos","toSave","loadToDos","getItem","s","parse","useEffect","boolean","console","log","loadWorking","View","style","styles","container","Text","StatusBar","header","TouchableOpacity","onPress","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","complete","change","onChangeText","payload","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","changeToDo","val","onEditingText","editToDo","toDoText","textDecorationLine","toDoOption","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","Entypo","BouncyCheckbox","fillColor","checkToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","marginTop","justifyContent","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","flexWrap","flexBasis"],"mappings":"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","file":"static/js/app.0c9c199d.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  gray: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Pressable,\n  Platform,\n  StyleSheet,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\nimport { Entypo } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst WORK_KEY = \"@working\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editText, setEditText] = useState(\"\");\n\n  const saveWorking = async (state) => {\n    await AsyncStorage.setItem(WORK_KEY, JSON.stringify(state));\n  };\n  const travel = () => {\n    setWorking(false);\n    saveWorking(working);\n  };\n  const work = () => {\n    setWorking(true);\n    saveWorking(working);\n  };\n\n  const onChangeText = (payload) => {\n    console.log(\"this is payload\", payload);\n    setText(payload);\n  };\n\n  const onEditingText = (change, key) => {\n    setEditText(change);\n\n    toDos[key].text = change;\n    setToDos(toDos);\n    saveToDos(toDos);\n    loadToDos(toDos);\n  };\n\n  const loadWorking = async () => {\n    const boolean = await AsyncStorage.getItem(WORK_KEY);\n    console.log(\"loaded working : \", boolean);\n    boolean !== \"true\" ? setWorking(true) : setWorking(false);\n  };\n\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {}\n  };\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      return s !== null ? setToDos(JSON.parse(s)) : null;\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    loadWorking();\n    loadToDos();\n    console.log(toDos);\n  }, []);\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, complete: false, change: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const editToDo = async (key) => {\n    console.log(\"hello\");\n    toDos[key].change = false;\n    setToDos(toDos);\n    saveToDos(toDos);\n    loadToDos(toDos);\n  };\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"cancel\" },\n        {\n          text: \"yes\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const checkToDo = (key) => {\n    toDos[key].complete = !toDos[key].complete;\n    setToDos(toDos);\n    saveToDos(toDos);\n    loadToDos(toDos);\n  };\n\n  const changeToDo = (key) => {\n    toDos[key].change = !toDos[key].change;\n    saveToDos(toDos);\n    setToDos(toDos);\n    loadToDos(toDos);\n    setEditText(toDos[key].text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"bold\",\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"bold\",\n              color: !working ? \"white\" : theme.gray,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              {!toDos[key].change ? (\n                <Text\n                  style={{\n                    ...styles.toDoText,\n                    textDecorationLine: toDos[key].complete\n                      ? \"line-through\"\n                      : null,\n                    color: toDos[key].complete ? \"black\" : \"white\",\n                  }}\n                >\n                  {toDos[key].text}\n                </Text>\n              ) : (\n                <TextInput\n                  value={toDos[key].text}\n                  style={styles.changeToDo}\n                  onChangeText={(val) => onEditingText(val, key)}\n                  onSubmitEditing={() => editToDo(key)}\n                />\n              )}\n\n              <View style={styles.toDoOption}>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <Fontisto name=\"trash\" size={18} color=\"white\" />\n                </TouchableOpacity>\n\n                <TouchableOpacity onPress={() => changeToDo(key)}>\n                  <Entypo name=\"pencil\" size={24} color=\"white\" />\n                </TouchableOpacity>\n                <BouncyCheckbox\n                  fillColor=\"red\"\n                  onPress={() => checkToDo(key)}\n                />\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: \"row\",\n    marginTop: 100,\n    justifyContent: \"space-between\",\n  },\n\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.gray,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  toDoOption: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    flexBasis: 150,\n  },\n  changeToDo: {\n    backgroundColor: \"white\",\n    fontSize: 16,\n    borderRadius: 15,\n    paddingHorizontal: 20,\n  },\n});\n"],"sourceRoot":""}